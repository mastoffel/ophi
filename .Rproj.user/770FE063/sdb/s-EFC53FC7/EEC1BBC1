{
    "contents" : "# IDEA: plot on a surface the relation of AIC and r2 of 10 000 randomized datasets.\n# Then show that our model is outside the mass (aic = 2447, r2 = 0.59, adjr2 = 0.172)\n\nlibrary(ggvis)\nlibrary(dplyr)\n\n# original\n# loading data\nall_aic <- unname(unlist(read.table(\"data/server/aic_10k.txt\")))\nall_r2 <- unname(unlist(read.table(\"data/server/r2_10k.txt\")))\nall_adjr2 <- unname(unlist(read.table(\"data/server/adjr2_10k.txt\")))\n\n# combine to df\nresults <- tbl_df(data.frame(aic = all_aic, r2 = all_r2, adjr2 = all_adjr2))\n\n# what proportion is higher?\nhigher <- results[(results$aic < 2447) & (results$r2 > 0.59), ]\nprop <- nrow(higher)/nrow(all_aic)\n\n# ggvis\nall_aic <- data.frame(aic = all_aic)\nall_aic %>% ggvis(x = ~aic, fill := \"#fff8dc\", opacity := input_slider(0,1)) %>% \n        layer_histograms(width := input_slider(0,2,step=0.1, label = \"width\"), boundary = 0) %>%\n        add_axis(\"x\", title = \"AIC\") %>%\n        add_axis(\"y\", title = \"frequency\")\n\n\n# getting grid for surface plot\n# aic_grid <- cut(sort(results$aic), 1000)\n# aic_grid <- seq(from = (min(results$aic)), to = (max(results$aic)), by = (max(results$aic)-min(results$aic))/1000)\n# r2_grid <- seq(from = (min(results$r2)), to = (max(results$r2)), by = (max(results$r2)-min(results$r2))/1000)\n# grid <- data.frame(aic = aic_grid, r2 = r2_grid)\n\n# 2d density estimation\nlibrary(MASS)\n# library(\"KernSmooth\")\n\ndens <- kde2d(results$aic, results$r2, n = 100)\n# same with KernSmooth package\n# dens_2 <- bkde2D(cbind(results$aic, results$r2), bandwidth = c(0.5,0.5),c(gridsize = c(100,100))\n# terrain.colors(30)\nsurf.colors <- function(x, col = rev(gray(seq(0, 1, len = 40)))) {\n        # First we drop the 'borders' and average the facet corners\n        # we need (nx - 1)(ny - 1) facet colours!\n        x.avg <- (x[-1, -1] + x[-1, -(ncol(x) - 1)] +\n                          x[-(nrow(x) -1), -1] + x[-(nrow(x) -1), -(ncol(x) - 1)]) / 4\n        # Now we construct the actual colours matrix\n        colors = col[cut(x.avg, breaks = length(col), include.lowest = T)]\n        return(colors)\n}\n\n# border = NA\n# col = surf.colors(dens$z)\nres <- persp(dens$x, dens$y, dens$z, \n             col = \"gray\", #surf.colors(dens$z),\n             phi = 30, theta = 240, box = T, # theta 240 phi 20\n             shade = .6, ticktype = \"detailed\", xlab = \"\\n\\n\\naic\", ylab = \"\\n\\n\\nr2\", \n             zlab = \"\\n\\n\\ndensity\", d=5, \n             nticks = 6, border = NA)\n\n# arrows(trans3d(x = 2447, y = 0.59, z = c(0.06), pmat = res), trans3d(x = 2447, y = 0.59, z = c(0.02), pmat = res))\npoints(trans3d(x = 2447, y = 0.59, z = 0.03, pmat = res), col = \"black\", pch = 19, cex = 1.5)\nlines(trans3d(x = 2447, y = 0.59, z = c(0,0.03), pmat = res),lwd = 2,lty = 5, col = \"black\")\nlines(trans3d(x = 2447, y = 0.59, z = 0.001, pmat = res), col = \"orange\", pch = \"0\", cex = 1.5)\n\npdf(\"SavingExample.pdf\", width=7, height=5)\nfilled.contour(dens,\n               #color.palette = colorRampPalette(c('#f7f7f7', '#edf8e9', '#bae4b3','#74c476', '#31a354','#006d2c')),\n               #color.palette = colorRampPalette(c('#f7f7f7', '#cccccc','#969696', '#636363','#252525')),\n               # color.palette = colorRampPalette(c('white', '#a1dab4','#41b6c4', '#2c7fb8','#253494')),\n               #color.palette = colorRampPalette(c('white', '#bdc9e1','#67a9cf', '#1c9099','#016c59')),\n               #color.palette = colorRampPalette(c('white', '#bdbdbd','#969696','#737373','#525252', '#252525', '#000000')),\n               #color.palette = colorRampPalette(c('white','lightblue', 'blue', 'red' ,'darkred')),\n               # color.palette = colorRampPalette(c('white', '#dadaeb','#bcbddc', '#6a51a3', '#6a51a3' ,'#3f007d')),\n               color.palette = colorRampPalette(c( 'white', '#d0d1e6','#74a9cf', '#0570b0','#023858')),\n               xlim = c(2390, 2510),\n               ylim = c(0.15, 0.7), \n               plot.axes     = { points(2447,0.59, pch = 21, col = \"black\", cex = 2, bg=\"red\", lwd = 2)\n                                 axis(1, seq(2380, 2520, by = 20))\n                                 axis(2, seq(0.1, 0.8,   by = 0.1)) })\ndev.off() \n\n\nlibrary(\"scatterplot3d\")\nscatterplot3d(x = dens$x, y = dens$y, z = dens$z)\nplot(dens)\n\n\nplot(results$aic, 1-results$r2)\npoints(x = 2447, y = 0.41, col = \"red\")\n\n\nlibrary(rgl)\n?hist3d\n# get adjr2\nophi_code <- read.csv(\"data/ophi_code.csv\", colClasses = c(rep(\"numeric\",2),rep(\"factor\",98)))\nmod_code <- glm(day_falling ~., data = ophi_code)\n# AIC backward stepwise \nlibrary(MASS)\nmod_aic_code <- stepAIC(mod_code, direction = \"backward\")\nr2 <- ((summary(mod_aic_code)$null.deviance) - \n               (summary(mod_aic_code)$deviance)) / (summary(mod_aic_code)$null.deviance)\nnpred <- length(summary(mod_aic_code)$contrasts)\nnobs <- nrow(ophi_code)\nadjr2 <- 1 - ((1 - r2^2) * (nobs - 1) / (nobs - npred - 1))\n",
    "created" : 1421249257443.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2832473825",
    "id" : "EEC1BBC1",
    "lastKnownWriteTime" : 1423234113,
    "path" : "C:/Users/Martin/Studium/projects/ophionotus/rand_test_analysis.R",
    "project_path" : "rand_test_analysis.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}